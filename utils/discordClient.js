import { Client, Intents } from "discord.js";
import axios from "axios";

// Bot Intents for PESU Bot
const botIntents = new Intents();
botIntents.add(
    Intents.FLAGS.GUILDS,
    Intents.FLAGS.GUILD_MEMBERS,
);

let client = null;

// Singleton method for bot login
const getBotClient = async() => {
    if(client === null) {
        client = new Client({
            intents: botIntents
        });
        await client.login(process.env.PESU_BOT_TOKEN);
    }
    return client;
}

// Get user ID from code generated by Discord Auth
// The code is exchanged for an access token
// The access token is used to get the user ID through the Discord API

// The functioon returns the user ID if API call is successful, else returns null
const getUserClientId = async(code) => {
    // Exchange code for access token
    // Refer to: https://discord.com/developers/docs/topics/oauth2#authorization-code-grant
    const tokenUrl = "https://discord.com/api/oauth2/token";
    const tokenData = new URLSearchParams();
    tokenData.append("grant_type", "authorization_code");
    tokenData.append("code", code);
    tokenData.append("redirect_uri", "http://localhost:3000"); // This redirect URL will have to be changed when deployed
    const tokenHeaders = {
        "Content-Type": "application/x-www-form-urlencoded"
    };
    try {
        const tokenResponse = await axios.post(
            tokenUrl, tokenData, {
                headers: tokenHeaders,
                auth: {
                    username: process.env.PESU_DISCORD_CLIENT_ID,
                    password: process.env.PESU_DISCORD_CLIENT_SECRET
                }
            }
        )

        // Get user ID from access token
        // Refer to: https://discord.com/developers/docs/resources/user#get-current-user
        const userUrl = "https://discord.com/api/users/@me";
        const userHeaders = {
            "Authorization": `${tokenResponse.data.token_type} ${tokenResponse.data.access_token}`
        };
        try {
            const response = await axios.get(userUrl, {headers: userHeaders});
            return response.data.id;
        } catch (error) {
            return null;
        }
    } catch (error) {
        return null;
    }
}

// Get guild object with bot login and discord package
const getGuild = async() => {
    const botClient = await getBotClient();
    const guild = botClient.guilds.cache.find(guild => guild.id === process.env.PESU_DISCORD_GUILD_ID);
    return guild;
}

export { getBotClient, getUserClientId, getGuild };
